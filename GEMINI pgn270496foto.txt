<!DOCTYPE html>
<html lang="sr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FINALNA Struktura Kategorija</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #fff;
            background: linear-gradient(135deg, #000000, #333844, #A6B1B5, #333844, #000000);
            padding: 20px;
            min-height: 100vh;
            transition: background 0.5s ease;
        }
        
        .container {
            max-width: 1200px;
            margin: 30px auto;
            background: #000000;
            border-radius: 15px;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        header {
            background: linear-gradient(120deg, #1a1a1a, #333844);
            color: white;
            padding: 35px 40px;
            text-align: center;
            border-bottom: 5px solid #555;
        }

        h1 {
            font-size: 2.8rem;
            margin-bottom: 15px;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .subtitle {
            font-size: 1.3rem;
            opacity: 0.9;
            margin-bottom: 20px;
        }

        .instructions {
            background: #f5f5f5;
            padding: 20px 30px;
            border-radius: 10px;
            margin-top: 25px;
            font-size: 1rem;
            border-left: 5px solid #555;
        }

        .instructions h3 {
            color: #666;
            margin-bottom: 10px;
            font-size: 1.4rem;
        }

        .content {
            padding: 35px;
        }

        .folder {
            margin-bottom: 18px;
            border-left: 4px solid transparent;
            transition: all 0.3s ease;
            position: relative;
        }

        .folder-header {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            background: #f8f9fa;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 600;
            border: 1px solid #555;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
        }

        .folder-header:hover {
            background: #e9ecef;
            border-color: #777;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .folder-icon {
            margin-right: 15px;
            font-size: 1.4rem;
            transition: transform 0.3s ease;
            min-width: 25px;
            text-align: center;
            color: inherit;
        }

        .folder-content {
            padding-left: 40px;
            margin-top: 12px;
            display: none;
            border-left: 3px dashed #ffffff;
            margin-left: 20px;
        }

        .folder-content.open {
            display: block;
            animation: fadeIn 0.4s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .leaf {
            padding: 12px 20px;
            background: #000000;
            color: #ffffff;
            margin: 8px 0;
            border-radius: 6px;
            border: 1px solid #ffffff;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .leaf:hover {
            background: #0a0a0a;
            border-color: #ffffff;
            transform: translateX(5px);
        }

        .leaf::before {
            content: "🔗";
            margin-right: 12px;
            color: #27ae60;
            font-size: 1.2rem;
        }

        .link-placeholder {
            color: #e74c3c;
            font-style: italic;
            background: #fef9e7;
            padding: 6px 14px;
            border-radius: 5px;
            display: inline-block;
            border: 2px dashed #f1c40f;
            margin-left: 10px;
            font-weight: 500;
        }

        .main-section {
            margin-bottom: 40px;
            background: #000000;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border: 1px solid #ffffff;
        }

        .section-header {
            background: linear-gradient(120deg, #333844, #1a1a1a);
            color: white;
            padding: 20px 25px;
            font-size: 1.6rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            border-bottom: 3px solid #555;
        }

        .section-header .icon {
            margin-right: 15px;
            font-size: 1.5rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        .section-content {
            padding: 25px;
            display: none;
        }
        
        .section-content.open {
            display: block;
        }

        .level-0 > .folder-header {
            background: #1a1a1a;
            border-color: #555;
            color: #ffffff;
        }

        .level-1 > .folder-header {
            background: #333844;
            border-color: #555;
            color: #ffffff;
        }

        .level-2 > .folder-header {
            background: #A6B1B5;
            color: #000000;
            border-color: #555;
            margin-left: 20px;
        }

        .level-3 > .folder-header {
            background: #404040;
            color: #FFFFFF;
            border-color: #555;
            margin-left: 40px;
        }

        .level-4 > .folder-header {
            background: #000000;
            color: #FFFFFF;
            border-color: #555;
            margin-left: 60px;
        }

        .level-5 > .folder-header {
            background: #f3e5f5;
            border-color: #555;
            margin-left: 80px;
        }

        footer {
            text-align: center;
            padding: 25px;
            color: #7f8c8d;
            font-size: 1rem;
            background: #f8f9fa;
            border-top: 3px solid #eaecef;
        }

        .toggle-all {
            display: block;
            margin: 30px auto;
            padding: 12px 30px;
            background: linear-gradient(120deg, #333844, #1a1a1a);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: all 0.3s;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .toggle-all:hover {
            background: linear-gradient(120deg, #1a1a1a, #333844);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .folder-name {
            flex-grow: 1;
            font-size: 1.1rem;
        }

        .folder-info {
            font-size: 0.85rem;
            color: #7f8c8d;
            background: #ecf0f1;
            padding: 4px 12px;
            border-radius: 15px;
            margin-left: 15px;
            font-weight: 500;
            border: 1px solid #bdc3c7;
        }

        .level-2 .leaf {
            margin-left: 40px;
        }

        .level-3 .leaf {
            margin-left: 60px;
        }

        .level-4 .leaf {
            margin-left: 80px;
        }

        .level-5 .leaf {
            margin-left: 100px;
        }

        .links-section {
            background: #2a2a2a;
            border-left: 3px solid #4a9eff;
            color: #ffffff;
        }

        .links-section a {
            color: #4a9eff;
        }

        .links-section a:hover {
            color: #6bb6ff;
        }

        .hint {
            color: #ffffff;
            background: #1f1f1f;
        }

        .source-hint {
            color: #666;
        }

        /* Floating Action Buttons */
        .floating-button {
            position: fixed;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            z-index: 1001;
            transition: all 0.3s ease;
            color: white;
            box-shadow: 0 4px 16px rgba(0,0,0,0.3);
        }

        .floating-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
        }

        .add-btn {
            left: 20px;
            top: 45%;
            background: linear-gradient(135deg, #000000, #000000);
        }

        .add-btn:hover {
            box-shadow: 0 6px 20px rgba(74,158,255,0.6);
        }

        .remove-btn {
            left: 20px;
            top: 55%;
            background: linear-gradient(135deg, #000000, #000000);
        }

        .remove-btn:hover {
            box-shadow: 0 6px 20px rgba(255,71,87,0.6);
        }

        .export-btn {
            left: 20px;
            top: 65%;
            background: linear-gradient(135deg, #000000, #000000);
        }

        .export-btn:hover {
            box-shadow: 0 6px 20px rgba(39,174,96,0.6);
        }

        .reset-btn {
            left: 20px;
            top: 35%;
            background: linear-gradient(135deg, #000000, #000000);
        }

        .reset-btn:hover {
            box-shadow: 0 6px 20px rgba(243,156,18,0.6);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.85);
            z-index: 1002;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: linear-gradient(145deg, #2a2a2a, #1e1e1e);
            padding: 30px;
            border-radius: 16px;
            width: 520px;
            max-width: 95%;
            max-height: 90vh;
            overflow-y: auto;
            border: 2px solid #4a9eff;
            box-shadow: 0 12px 40px rgba(0,0,0,0.7);
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .modal-header h3 {
            color: #4a9eff;
            margin: 0;
            font-size: 1.4em;
        }

        .close-btn {
            background: none;
            border: none;
            color: #999;
            font-size: 24px;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            background: #444;
            color: #fff;
        }
        
        .tab-nav {
            display: flex;
            margin-bottom: 25px;
            border-radius: 8px;
            overflow: hidden;
            background: #1a1a1a;
        }

        .tab-btn {
            flex: 1;
            padding: 12px 20px;
            background: #333;
            color: #ccc;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .tab-btn.active {
            background: #4a9eff;
            color: white;
        }

        .tab-btn:hover:not(.active) {
            background: #444;
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .action-type {
            display: flex;
            gap: 12px;
            margin-bottom: 25px;
        }

        .type-btn {
            flex: 1;
            padding: 12px;
            background: #333;
            color: #ccc;
            border: 2px solid #444;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-size: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .type-btn.active {
            background: #4a9eff;
            color: white;
            border-color: #4a9eff;
        }

        .type-btn:hover:not(.active) {
            background: #444;
            border-color: #555;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            color: #fff;
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-input, .form-select {
            width: 100%;
            padding: 12px;
            background: #1a1a1a;
            color: white;
            border: 2px solid #444;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-input:focus, .form-select:focus {
            outline: none;
            border-color: #4a9eff;
            box-shadow: 0 0 0 3px rgba(74,158,255,0.1);
        }

        .preview-section {
            margin-top: 15px;
            padding: 15px;
            background: #1a1a1a;
            border-radius: 8px;
            border: 1px solid #333;
            display: none;
        }

        .preview-section.show {
            display: block;
        }

        .preview-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px;
            margin-bottom: 8px;
            background: #2a2a2a;
            border-radius: 6px;
        }

        .preview-icon {
            color: #4a9eff;
            font-size: 16px;
        }

        .preview-text {
            flex: 1;
            color: #fff;
        }

        .preview-url {
            font-size: 12px;
            color: #888;
            margin-top: 4px;
        }

        .btn-group {
            display: flex;
            gap: 12px;
            justify-content: center;
            margin-top: 25px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4a9eff, #0066cc);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #3d8ce6, #0052a3);
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: #666;
            color: white;
        }

        .btn-secondary:hover {
            background: #777;
            transform: translateY(-1px);
        }

        /* Status Message */
        .status-message {
            margin-top: 15px;
            text-align: center;
            min-height: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .status-success {
            color: #4a9eff;
        }

        .status-error {
            color: #ff4757;
        }

        /* Scrollbar */
        .modal-content::-webkit-scrollbar {
            width: 6px;
        }

        .modal-content::-webkit-scrollbar-track {
            background: #1a1a1a;
        }

        .modal-content::-webkit-scrollbar-thumb {
            background: #4a9eff;
            border-radius: 3px;
        }

        .position-group {
            margin-top: 15px;
            padding: 12px;
            background: #222;
            border-radius: 8px;
            border: 1px solid #444;
        }

        .position-options {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .position-radio {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 6px;
            cursor: pointer;
        }

        .position-radio input[type="radio"] {
            margin: 0;
        }

        .position-radio label {
            margin: 0;
            cursor: pointer;
            font-size: 13px;
        }

        @media (max-width: 768px) {
            .content {
                padding: 20px;
            }

            h1 {
                font-size: 2.2rem;
            }

            .folder-content {
                padding-left: 20px;
            }

            .folder-header {
                padding: 12px 15px;
                font-size: 1rem;
            }

            .leaf {
                padding: 10px 15px;
                font-size: 0.95rem;
            }

            .section-header {
                padding: 15px 20px;
                font-size: 1.3rem;
            }
        }

        /* --- LINK COLOR CONTROLS --- */
        :root{
          --link-color: #ffffff;
          --link-hover: #4a9eff;
          --link-visited: #cfcfcf;
          --link-visited-hover: #1BA692;
        }

        /* Osnovno za linkove unutar glavnog kontejnera/sekcija/foldera */
        .container a,
        .main-section a,
        .section-content a,
        .folder a,
        .folder-content a,
        .leaf a {
          color: var(--link-color) !important;
          text-decoration: none !important;
          transition: color 0.15s ease !important;
        }

        /* Stanja: hover / focus / active -> hover boja */
        .container a:hover,
        .main-section a:hover,
        .section-content a:hover,
        .folder a:hover,
        .folder-content a:hover,
        .leaf a:hover,
        .container a:focus,
        .container a:active {
          color: var(--link-hover) !important;
        }

        /* Visited */
        .container a:visited,
        .main-section a:visited,
        .section-content a:visited,
        .folder a:visited,
        .folder-content a:visited,
        .leaf a:visited {
          color: var(--link-visited) !important;
        }
        
        .container a:visited:hover {
          color: var(--link-visited-hover) !important;
        }

        /* Ako želiš da .links-section ostane plava kao pre, zadrži ovaj blok */
        .links-section a {
          color: #4a9eff !important;
        }
        
        .links-section a:hover {
          color: #6bb6ff !important;
        }
    </style>
</head>
<body>


    <div id="resetButton" class="floating-button reset-btn" onclick="resetToOriginal()" title="Reset na originalni sadržaj">
        <i class="fas fa-undo"></i>
    </div>

    <div id="addBookmarkButton" class="floating-button add-btn" onclick="openBookmarkModal()" title="Dodaj novi bookmark ili folder">
        <i class="fas fa-plus"></i>
    </div>

    <div id="removeBookmarkButton" class="floating-button remove-btn" onclick="openRemoveModal()" title="Ukloni bookmark ili folder">
        <i class="fas fa-trash"></i>
    </div>

    <div id="exportButton" class="floating-button export-btn" onclick="exportHTML()" title="Izvezi HTML">
        <i class="fas fa-download"></i>
    </div>

    <div id="bookmarkModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">📌 Upravljanje Bookmarkovima</h3>
                <button class="close-btn" onclick="closeBookmarkModal()">&times;</button>
            </div>

            <div class="tab-nav">
                <button class="tab-btn active" onclick="switchTab('add')">
                    <i class="fas fa-plus"></i> Dodaj
                </button>
                <button class="tab-btn" onclick="switchTab('remove')">
                    <i class="fas fa-trash"></i> Ukloni
                </button>
            </div>

            <div id="addTab" class="tab-content active">
                <div class="action-type">
                    <button class="type-btn active" onclick="selectAddType('bookmark')">
                        <i class="fas fa-bookmark"></i> Bookmark
                    </button>
                    <button class="type-btn" onclick="selectAddType('folder')">
                        <i class="fas fa-folder"></i> Folder
                    </button>
                </div>

                <div id="bookmarkForm" class="form-section">
                    <div class="form-group">
                        <label><i class="fas fa-tag"></i> Naslov:</label>
                        <input type="text" id="bookmarkTitle" class="form-input" placeholder="Ninite - Install or Update Multiple Apps">
                    </div>
                    
                    <div class="form-group">
                        <label><i class="fas fa-link"></i> URL:</label>
                        <input type="text" id="bookmarkUrl" class="form-input" placeholder="https://ninite.com/">
                    </div>
                    
                    <div class="form-group">
                        <label><i class="fas fa-folder-open"></i> Kategorija:</label>
                        <select id="categorySelect" class="form-select">
                            <option value="">-- Izaberi kategoriju --</option>
                        </select>
                    </div>
                </div>

                <div id="folderForm" class="form-section" style="display: none;">
                    <div class="form-group">
                        <label><i class="fas fa-folder"></i> Naziv Foldera:</label>
                        <input type="text" id="folderName" class="form-input" placeholder="Novi Folder">
                    </div>
                    
                    <div class="form-group">
                        <label><i class="fas fa-layer-group"></i> Parent Folder:</label>
                        <select id="parentFolderSelect" class="form-select" onchange="updatePositionOptions()">
                            <option value="">-- Root Level (Nova glavna kategorija) --</option>
                        </select>
                    </div>
                    
                    <div id="positionGroup" class="position-group">
                        <label><i class="fas fa-sort"></i> Pozicija:</label>
                        <div id="positionOptions" class="position-options">
                            </div>
                    </div>
                </div>
            </div>

            <div id="removeTab" class="tab-content">
                <div class="action-type">
                    <button class="type-btn active" onclick="selectRemoveType('bookmark')">
                        <i class="fas fa-bookmark"></i> Bookmark
                    </button>
                    <button class="type-btn" onclick="selectRemoveType('folder')">
                        <i class="fas fa-folder"></i> Folder
                    </button>
                </div>

                <div id="removeBookmarkForm" class="form-section">
                    <div class="form-group">
                        <label><i class="fas fa-search"></i> Izaberi Bookmark za brisanje:</label>
                        <select id="bookmarkRemoveSelect" class="form-select">
                            <option value="">-- Izaberi bookmark --</option>
                        </select>
                    </div>
                    
                    <div id="bookmarkPreview" class="preview-section">
                        </div>
                </div>

                <div id="removeFolderForm" class="form-section" style="display: none;">
                    <div class="form-group">
                        <label><i class="fas fa-folder-minus"></i> Izaberi Folder za brisanje:</label>
                        <select id="folderRemoveSelect" class="form-select">
                            <option value="">-- Izaberi folder --</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label><i class="fas fa-exclamation-triangle"></i> Opcije brisanja:</label>
                        <select id="deleteOptionsSelect" class="form-select">
                            <option value="folder-only">Obriši samo folder (premesti sadržaj u parent)</option>
                            <option value="folder-content">Obriši folder sa CELIM sadržajem</option>
                        </select>
                    </div>
                    
                    <div id="folderPreview" class="preview-section">
                    </div>
                </div>
            </div>

            <div class="btn-group">
                <button id="actionBtn" class="btn btn-primary" onclick="executeAction()">
                    <i class="fas fa-check"></i> <span id="actionBtnText">Dodaj</span>
                </button>
                <button class="btn btn-secondary" onclick="closeBookmarkModal()">
                    <i class="fas fa-times"></i> Otkaži
                </button>
            </div>
            
            <div id="statusMessage" class="status-message"></div>
        </div>
    </div>

    <div id="searchBar" style="position: absolute; top: 1350px; left: 820px; width: 280px; background: #2a2a2a; padding: 5px; border-radius: 8px; border: 1px solid #555; cursor: grab; z-index: 1000; box-sizing: border-box;">
        <h4 style="color: #D9D4D4; margin: 0 0 10px 0;">🔍 KONTROLE</h4>
        <input type="text" id="searchBox" placeholder="Search for Category..." onkeyup="if(event.key==='Enter'){searchFolders();}" style="width: 100%; padding: 5px; margin-bottom: 10px; background: #1a1a1a; color: white; border: 1px solid #555; border-radius: 4px;">
        
        <div id="searchResults" style="color: #4a9eff; font-size: 12px; margin-bottom: 8px; min-height: 16px;"></div>
        
        <div id="searchNavigation" style="display: none; margin-bottom: 10px;">
            <button id="prevResult" onclick="navigateResults(-1)" style="background: #666; color: white; border: none; padding: 4px 8px; margin: 2px; border-radius: 3px; cursor: pointer; font-size: 12px;">◀ Preth</button>
            <span id="currentResult" style="color: #fff; font-size: 12px; margin: 0 8px;">1/1</span>
            <button id="nextResult" onclick="navigateResults(1)" style="background: #666; color: white; border: none; padding: 4px 8px; margin: 2px; border-radius: 3px; cursor: pointer; font-size: 12px;">Sleć ▶</button>
        </div>
        
        <button onclick="clearSearchBar()" style="background: #D9D4D4; color: black; border: none; padding: 5px 10px; margin: 2px; border-radius: 4px; cursor: pointer;">Obriši pretragu</button>
    </div>

    <div class="container">
      <header>
            <h1>Lions Pith – Database <i class="fas fa-folder-tree"></i>&nbsp;</h1>
        <div class="subtitle">Welcome to the Lions Pith – the one webpage you will ever need: a resource for everything. Free or paid. You decide.</div>
        </header>

        <div class="content">
          <div id="buttons-container" style="display: flex; gap: 10px; justify-content: center;">
              <button class="toggle-all" id="toggleSections"><i class="fas fa-expand-arrows-alt"></i> Open/Hide all sections</button>
              <button class="toggle-all" id="toggleAll"><i class="fas fa-expand-arrows-alt"></i> Open/Hide all folders</button>
          </div>
        </div>
				<div class="main-section" data-id="section_1">
    <div class="section-header">
        <i class="fas fa-user-cog icon"></i>
        1. PERSONAL &amp; ADMIN
    </div>
    <div class="section-content">
        <div class="folder level-1" data-id="folder_1000">
            <div class="folder-header">
                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                <span class="folder-name">1.1 ⭐ Favorites</span>
                <span class="folder-info">Frequently used resources</span>
            </div>
            <div class="folder-content"></div>
        </div>
        <div class="folder level-1" data-id="folder_1001">
            <div class="folder-header">
                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                <span class="folder-name">1.2 📁 Files &amp; Storage Management</span>
                <span class="folder-info">Organize and store files</span>
            </div>
            <div class="folder-content">
                <div class="folder level-2" data-id="folder_1002">
                    <div class="folder-header">
                        <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                        <span class="folder-name">1.2.1 Local Files</span>
                        <span class="folder-info">main folder - Personal local files</span>
                    </div>
                    <div class="folder-content">
                        <div class="folder level-3" data-id="folder_1003">
                            <div class="folder-header">
                                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                                <span class="folder-name">1.2.1.1 Documents</span>
                                <span class="folder-info">Text and document files</span>
                            </div>
                            <div class="folder-content"></div>
                        </div>
                        <div class="folder level-3" data-id="folder_1004">
                            <div class="folder-header">
                                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                                <span class="folder-name">1.2.1.2 AirDrop (ALL OS &amp; Users)</span>
                                <span class="folder-info">Cross-device file sharing</span>
                            </div>
                            <div class="folder-content"></div>
                        </div>
                    </div>
                </div>
                <div class="folder level-2" data-id="folder_1005">
                    <div class="folder-header">
                        <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                        <span class="folder-name">1.2.2 File Hosting &amp; Sharing</span>
                        <span class="folder-info">Online file storage and sharing</span>
                    </div>
                    <div class="folder-content">
                        <div class="folder level-3" data-id="folder_1006">
                            <div class="folder-header">
                                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                                <span class="folder-name">1.2.2.1 Cloud Storage</span>
                                <span class="folder-info">Cloud-based storage solutions</span>
                            </div>
                            <div class="folder-content"></div>
                        </div>
                        <div class="folder level-3" data-id="folder_1007">
                            <div class="folder-header">
                                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                                <span class="folder-name">1.2.2.2 File Transfer Services</span>
                                <span class="folder-info">Services for sending files</span>
                            </div>
                            <div class="folder-content"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="folder level-1" data-id="folder_1008">
            <div class="folder-header">
                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                <span class="folder-name">1.3 📄 Personal Administration</span>
                <span class="folder-info">Manage personal documents</span>
            </div>
            <div class="folder-content">
                <div class="folder level-2" data-id="folder_1009">
                    <div class="folder-header">
                        <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                        <span class="folder-name">1.3.1 German VISA Documents</span>
                        <span class="folder-info">Visa related papers</span>
                    </div>
                    <div class="folder-content"></div>
                </div>
                <div class="folder level-2" data-id="folder_1010">
                    <div class="folder-header">
                        <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                        <span class="folder-name">1.3.2 Shopping Lists</span>
                        <span class="folder-info">Personal shopping notes</span>
                    </div>
                    <div class="folder-content"></div>
                </div>
                <div class="folder level-2" data-id="folder_1011">
                    <div class="folder-header">
                        <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                        <span class="folder-name">1.3.3 Bills Management</span>
                        <span class="folder-info">Track and organize bills</span>
                    </div>
                    <div class="folder-content">
                        <div class="folder level-3" data-id="folder_1012">
                            <div class="folder-header">
                                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                                <span class="folder-name">1.3.3.1 Serbia</span>
                                <span class="folder-info">Bills for Serbia</span>
                            </div>
                            <div class="folder-content"></div>
                        </div>
                        <div class="folder level-3" data-id="folder_1013">
                            <div class="folder-header">
                                <i class="fas fa-chevron-right folder-icon" style="transform: rotate(0deg);"></i>
                                <span class="folder-name">1.3.3.2 Germany</span>
                                <span class="folder-info">Bills for Germany</span>
                            </div>
                            <div class="folder-content"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
// ==================== CONSTANTS & CONFIGURATION ====================
const STORAGE_KEY = 'lionsPith:data:v3';
const CURRENT_VERSION = '3.0';

// Check for reset parameter
const urlParams = new URLSearchParams(window.location.search);
if (urlParams.get('reset') === 'true') {
    localStorage.removeItem(STORAGE_KEY);
    // Remove parameter from URL
    window.history.replaceState({}, document.title, window.location.pathname);
}

// ==================== GLOBAL STATE ====================
let currentTab = 'add';
let currentAddType = 'bookmark';
let currentRemoveType = 'bookmark';
let bookmarkElements = [];
let allFolders = [];
let nextElementId = 1000;

// ==================== INITIALIZATION ====================
document.addEventListener('DOMContentLoaded', function() {
    initializeDataIds();
    initializeOriginalFunctionality();
    initializeBookmarkFunctionality();
    
    // Try to restore from storage, if fails use original content
    if (!restoreFromStorage()) {
        console.log('Using original HTML content');
    }
    
    cacheAllFolders();
});

function initializeDataIds() {
    // Add data-id to elements that don't have it
    let idCounter = nextElementId;
    
    // Sections
    document.querySelectorAll('.main-section').forEach((section, index) => {
        if (!section.dataset.id) {
            section.dataset.id = `section_${index + 1}`;
        }
    });
    
    // Folders
    document.querySelectorAll('.folder').forEach((folder) => {
        if (!folder.dataset.id) {
            folder.dataset.id = `folder_${idCounter++}`;
        }
    });
    
    nextElementId = idCounter;
}

function initializeOriginalFunctionality() {
    // Search bar drag functionality
    const dragElement = document.getElementById("searchBar");
    let offsetX = 0, offsetY = 0, isDown = false;

    // Drag functionality
    if (dragElement) {
        dragElement.addEventListener('mousedown', function(e) {
            isDown = true;
            offsetX = e.clientX - dragElement.offsetLeft;
            offsetY = e.clientY - dragElement.offsetTop;
            dragElement.style.cursor = 'grabbing';
        });

        document.addEventListener('mouseup', function() {
            isDown = false;
            if (dragElement) dragElement.style.cursor = 'grab';
        });

        document.addEventListener('mousemove', function(e) {
            if (!isDown || !dragElement) return;
            dragElement.style.left = (e.clientX - offsetX) + 'px';
            dragElement.style.top = (e.clientY - offsetY) + 'px';
        });
    }

    // Folder click functionality
    attachFolderClickHandlers();

    // Toggle All buttons
    const toggleSectionsButton = document.getElementById('toggleSections');
    if (toggleSectionsButton) {
        toggleSectionsButton.addEventListener('click', function() {
            const allSectionContents = document.querySelectorAll('.section-content');
            const allIcons = document.querySelectorAll('.section-header .icon');
            const isAnyClosed = Array.from(allSectionContents).some(c => !c.classList.contains('open'));

            allSectionContents.forEach((content, idx) => {
                if (isAnyClosed) {
                    content.classList.add('open');
                } else {
                    content.classList.remove('open');
                }
            });

            toggleSectionsButton.textContent = isAnyClosed ? 'Hide all sections' : 'Open all sections';
        });
    }
    
    const toggleAllBtn = document.getElementById('toggleAll');
    if (toggleAllBtn) {
        toggleAllBtn.addEventListener('click', function() {
            const allContents = document.querySelectorAll('.folder-content');
            const allIcons = document.querySelectorAll('.folder-icon');

            let shouldOpen = false;
            if (allContents.length > 0) {
                let firstOpen = false;
                for (let i = 0; i < allContents.length; i++) {
                    if (allContents[i].classList.contains('open')) {
                        firstOpen = true;
                        break;
                    }
                }
                if (!firstOpen) {
                    shouldOpen = true;
                }
            }

            allContents.forEach(content => {
                if (shouldOpen) {
                    content.classList.add('open');
                } else {
                    content.classList.remove('open');
                }
            });

            allIcons.forEach(icon => {
                icon.style.transform = shouldOpen ? 'rotate(90deg)' : 'rotate(0deg)';
            });

            toggleAllBtn.innerHTML = shouldOpen ? 
                '<i class="fas fa-compress-arrows-alt"></i> Hide all folders' : 
                '<i class="fas fa-expand-arrows-alt"></i> Open all folders';
        });
    }

    // Default keep all folders and sections CLOSED
    document.querySelectorAll('.folder-content, .section-content').forEach(content => {
        content.classList.remove('open');
        const header = content.previousElementSibling;
        if (header) {
            const icon = header.querySelector('.folder-icon');
            if (icon) icon.style.transform = 'rotate(0deg)';
        }
    });
}

function attachFolderClickHandlers() {
    const headers = document.querySelectorAll('.folder-header, .section-header');
    headers.forEach(header => {
        if (!header.hasAttribute('data-click-attached')) {
            header.setAttribute('data-click-attached', 'true');
            header.addEventListener('click', function(e) {
                e.stopPropagation();
                const content = this.nextElementSibling;
                const icon = this.querySelector('.folder-icon');
                
                if (content && (content.classList.contains('folder-content') || content.classList.contains('section-content'))) {
                    const isOpen = content.classList.contains('open');
                    if (isOpen) {
                        content.classList.remove('open');
                        if (icon) icon.style.transform = 'rotate(0deg)';
                    } else {
                        content.classList.add('open');
                        if (icon) icon.style.transform = 'rotate(90deg)';
                    }
                }
            });
        }
    });
}

function initializeBookmarkFunctionality() {
    // Modal click outside to close
    const modal = document.getElementById('bookmarkModal');
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeBookmarkModal();
        }
    });

    // Keyboard support for form inputs
    ['bookmarkTitle', 'bookmarkUrl', 'folderName'].forEach(id => {
        const input = document.getElementById(id);
        if (input) {
            input.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    executeAction();
                }
            });
        }
    });
}

// ==================== PERSISTENT STORAGE ====================
function saveToStorage() {
    try {
        const data = {
            structure: serializeStructure(),
            timestamp: Date.now(),
            version: CURRENT_VERSION
        };
        localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
        console.log('Data saved to localStorage with version:', CURRENT_VERSION);
    } catch (e) {
        console.error('Failed to save to localStorage:', e);
        showStatus('Greška pri čuvanju podataka!', 'error');
    }
}

function restoreFromStorage() {
    try {
        const stored = localStorage.getItem(STORAGE_KEY);
        if (stored) {
            const data = JSON.parse(stored);
            
            // Version check - ignore old versions
            if (!data.version || data.version !== CURRENT_VERSION) {
                console.log('Version mismatch or missing version. Clearing old data.');
                localStorage.removeItem(STORAGE_KEY);
                return false;
            }
            
            if (data.structure && data.structure.sections) {
                deserializeStructure(data.structure);
                console.log('Data restored from localStorage');
                return true;
            }
        }
    } catch (e) {
        console.error('Failed to restore from localStorage:', e);
        localStorage.removeItem(STORAGE_KEY);
    }
    return false;
}

// ================== FIXED FUNCTION - START ==================
function serializeStructure() {
    const sections = [];
    
    document.querySelectorAll('.main-section').forEach((section) => {
        const header = section.querySelector('.section-header');
        const headerText = header ? header.textContent.trim() : '';
        const icon = header ? header.querySelector('.icon') : null;
        const iconClass = icon ? icon.className : 'fas fa-folder icon'; // Get icon class, provide default
        
        const folders = [];
        serializeFolder(section.querySelector('.section-content'), folders, 1);
        
        sections.push({
            id: section.dataset.id || `section_${sections.length + 1}`,
            header: headerText,
            iconClass: iconClass, // Save the icon class
            folders: folders
        });
    });
    
    return { sections, nextElementId };
}
// ================== FIXED FUNCTION - END ==================

function serializeFolder(container, folders, level) {
    if (!container) return;
    
    container.querySelectorAll(':scope > .folder').forEach((folder) => {
        const header = folder.querySelector('.folder-header .folder-name');
        const folderName = header ? header.textContent.trim() : '';
        
        const bookmarks = [];
        const content = folder.querySelector('.folder-content');
        if (content) {
            content.querySelectorAll(':scope > .leaf').forEach(leaf => {
                const link = leaf.querySelector('a');
                if (link) {
                    bookmarks.push({
                        title: link.textContent.trim(),
                        url: link.href
                    });
                }
            });
        }
        
        const childFolders = [];
        if (content) {
            serializeFolder(content, childFolders, level + 1);
        }
        
        folders.push({
            id: folder.dataset.id || `folder_${folders.length + 1}`,
            name: folderName,
            level: level,
            bookmarks: bookmarks,
            children: childFolders,
            isOpen: content ? content.classList.contains('open') : false
        });
    });
}

// ================== FIXED FUNCTION - START ==================
function deserializeStructure(structure) {
    const container = document.querySelector('.container');
    if (!container) {
        console.error("Container not found for deserialization");
        return;
    }

    // Remove all existing main sections from the correct container
    container.querySelectorAll('.main-section').forEach(section => section.remove());
    
    // Recreate structure from saved data
    structure.sections.forEach((sectionData) => {
        const section = document.createElement('div');
        section.className = 'main-section';
        section.dataset.id = sectionData.id;
        
        // Use the saved icon class, with a fallback
        const headerIconClass = sectionData.iconClass || 'fas fa-folder icon';
        
        // Recreate inner HTML for the section
        section.innerHTML = `
            <div class="section-header">
                <i class="${headerIconClass}"></i>
                ${sectionData.header}
            </div>
            <div class="section-content"></div>
        `;
        
        const sectionContent = section.querySelector('.section-content');
        if (sectionData.folders) {
            sectionData.folders.forEach(folderData => {
                createFolderElement(sectionContent, folderData);
            });
        }
        
        // Append to the main container, which correctly places it after the .content div
        container.appendChild(section);
    });
    
    // Update nextElementId if available
    if (structure.nextElementId) {
        nextElementId = structure.nextElementId;
    }
    
    // Reattach event handlers
    setTimeout(() => {
        attachFolderClickHandlers();
        cacheAllFolders();
    }, 100);
}
// ================== FIXED FUNCTION - END ==================


function createFolderElement(container, folderData) {
    const folderDiv = document.createElement('div');
    folderDiv.className = `folder level-${folderData.level}`;
    folderDiv.dataset.id = folderData.id;
    
    const folderHeader = document.createElement('div');
    folderHeader.className = 'folder-header';
    folderHeader.innerHTML = `
        <i class="fas fa-chevron-right folder-icon" style="transform: ${folderData.isOpen ? 'rotate(90deg)' : 'rotate(0deg)'}"></i>
        <span class="folder-name">${folderData.name}</span>
    `;
    
    const folderContent = document.createElement('div');
    folderContent.className = `folder-content ${folderData.isOpen ? 'open' : ''}`;
    
    // Add bookmarks
    folderData.bookmarks.forEach(bookmarkData => {
        const leafDiv = document.createElement('div');
        leafDiv.className = 'leaf';
        leafDiv.innerHTML = `<a href="${bookmarkData.url}" target="_blank" rel="noopener noreferrer">${bookmarkData.title}</a>`;
        folderContent.appendChild(leafDiv);
    });
    
    // Add child folders
    folderData.children.forEach(childData => {
        createFolderElement(folderContent, childData);
    });
    
    folderDiv.appendChild(folderHeader);
    folderDiv.appendChild(folderContent);
    container.appendChild(folderDiv);
}

function cacheAllFolders() {
    allFolders = Array.from(document.querySelectorAll('.folder, .main-section')).map((element, index) => {
        let name = '';
        let level = 0;
        let header = null;
        
        if (element.classList.contains('main-section')) {
            header = element.querySelector('.section-header');
            name = header ? header.textContent.trim() : '';
            level = 0;
        } else {
            header = element.querySelector('.folder-header');
            const folderNameEl = header ? header.querySelector('.folder-name') : null;
            name = folderNameEl ? folderNameEl.textContent.trim() : '';
            level = getFolderLevel(element);
        }
        
        return {
            element: element,
            header: header,
            name: name,
            level: level,
            index: index,
            id: element.dataset.id || `element_${index}`
        };
    });
}

// ==================== RESET FUNCTIONALITY ====================
function resetToOriginal() {
    if (confirm('Da li ste sigurni da želite da resetujete na originalni sadržaj? Sve izmene će biti izgubljene.')) {
        localStorage.removeItem(STORAGE_KEY);
        location.reload();
    }
}

// ==================== MODAL MANAGEMENT ====================
function openBookmarkModal() {
    switchTab('add');
    populateCategories();
    populateParentFolders();
    document.getElementById('bookmarkModal').style.display = 'flex';
    setTimeout(() => {
        const firstInput = document.getElementById('bookmarkTitle');
        if (firstInput) firstInput.focus();
    }, 100);
}

function openRemoveModal() {
    switchTab('remove');
    populateBookmarksForRemoval();
    populateFoldersForRemoval();
    document.getElementById('bookmarkModal').style.display = 'flex';
}

function closeBookmarkModal() {
    document.getElementById('bookmarkModal').style.display = 'none';
    clearAllForms();
}

function clearAllForms() {
    // Clear add forms
    document.getElementById('bookmarkTitle').value = '';
    document.getElementById('bookmarkUrl').value = '';
    document.getElementById('folderName').value = '';
    document.getElementById('categorySelect').value = '';
    document.getElementById('parentFolderSelect').value = '';
    
    // Clear remove forms
    document.getElementById('bookmarkRemoveSelect').value = '';
    document.getElementById('folderRemoveSelect').value = '';
    document.getElementById('deleteOptionsSelect').value = 'folder-only';
    
    // Clear previews and status
    document.getElementById('bookmarkPreview').innerHTML = '';
    document.getElementById('folderPreview').innerHTML = '';
    document.getElementById('statusMessage').innerHTML = '';
    document.getElementById('bookmarkPreview').classList.remove('show');
    document.getElementById('folderPreview').classList.remove('show');
}

// ==================== TAB AND TYPE SWITCHING ====================
function switchTab(tab) {
    currentTab = tab;
    
    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    const targetBtn = Array.from(document.querySelectorAll('.tab-btn')).find(btn => 
        btn.onclick && btn.onclick.toString().includes(`switchTab('${tab}')`)
    );
    if (targetBtn) targetBtn.classList.add('active');
    
    // Update tab content
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    document.getElementById(`${tab}Tab`).classList.add('active');
    
    // Update modal title and action button
    if (tab === 'add') {
        document.getElementById('modalTitle').innerHTML = '📌 Dodaj Bookmark ili Folder';
        document.getElementById('actionBtnText').textContent = 'Dodaj';
    } else {
        document.getElementById('modalTitle').innerHTML = '🗑️ Ukloni Bookmark ili Folder';
        document.getElementById('actionBtnText').textContent = 'Ukloni';
    }
}

function selectAddType(type) {
    currentAddType = type;
    
    // Update type buttons
    document.querySelectorAll('#addTab .type-btn').forEach(btn => btn.classList.remove('active'));
    const targetBtn = Array.from(document.querySelectorAll('#addTab .type-btn')).find(btn => 
        btn.onclick && btn.onclick.toString().includes(`selectAddType('${type}')`)
    );
    if (targetBtn) targetBtn.classList.add('active');
    
    // Show/hide forms
    if (type === 'bookmark') {
        document.getElementById('bookmarkForm').style.display = 'block';
        document.getElementById('folderForm').style.display = 'none';
    } else {
        document.getElementById('bookmarkForm').style.display = 'none';
        document.getElementById('folderForm').style.display = 'block';
        updatePositionOptions();
    }
}

function selectRemoveType(type) {
    currentRemoveType = type;
    
    // Update type buttons
    document.querySelectorAll('#removeTab .type-btn').forEach(btn => btn.classList.remove('active'));
    const targetBtn = Array.from(document.querySelectorAll('#removeTab .type-btn')).find(btn => 
        btn.onclick && btn.onclick.toString().includes(`selectRemoveType('${type}')`)
    );
    if (targetBtn) targetBtn.classList.add('active');
    
    // Show/hide forms
    if (type === 'bookmark') {
        document.getElementById('removeBookmarkForm').style.display = 'block';
        document.getElementById('removeFolderForm').style.display = 'none';
    } else {
        document.getElementById('removeBookmarkForm').style.display = 'none';
        document.getElementById('removeFolderForm').style.display = 'block';
    }
}

// ==================== POSITION OPTIONS ====================
function updatePositionOptions() {
    const parentSelect = document.getElementById('parentFolderSelect');
    const positionOptions = document.getElementById('positionOptions');
    
    const selectedParentId = parentSelect.value;
    
    // Clear previous options
    positionOptions.innerHTML = '';
    const sectionSelectDiv = document.getElementById('sectionSelectDiv');
    if (sectionSelectDiv) {
        sectionSelectDiv.remove();
    }

    if (!selectedParentId || selectedParentId === '') {
        // Root level options
        positionOptions.innerHTML = `
            <div class="position-radio">
                <input type="radio" name="position" value="root-start" id="pos-root-start" checked>
                <label for="pos-root-start">Na početku (kao prva sekcija)</label>
            </div>
            <div class="position-radio">
                <input type="radio" name="position" value="root-before" id="pos-root-before">
                <label for="pos-root-before">Pre određene sekcije</label>
            </div>
            <div class="position-radio">
                <input type="radio" name="position" value="root-after" id="pos-root-after">
                <label for="pos-root-after">Posle određene sekcije</label>
            </div>
            <div class="position-radio">
                <input type="radio" name="position" value="root-end" id="pos-root-end">
                <label for="pos-root-end">Na kraju (kao poslednja sekcija)</label>
            </div>
        `;
        
        // Add section selection when needed
        const beforeRadio = document.getElementById('pos-root-before');
        const afterRadio = document.getElementById('pos-root-after');
        
        [beforeRadio, afterRadio].forEach(radio => {
            radio.addEventListener('change', function() {
                let currentSectionSelect = document.getElementById('sectionSelectDiv');
                if (this.checked && !currentSectionSelect) {
                    addSectionSelect();
                }
            });
        });
         document.getElementById('pos-root-start').addEventListener('change', () => {
            let el = document.getElementById('sectionSelectDiv');
            if (el) el.remove();
        });
        document.getElementById('pos-root-end').addEventListener('change', () => {
            let el = document.getElementById('sectionSelectDiv');
            if (el) el.remove();
        });
        
    } else {
        // Child/sibling options
        positionOptions.innerHTML = `
            <div class="position-radio">
                <input type="radio" name="position" value="child" id="pos-child" checked>
                <label for="pos-child">Kao dete (unutar foldera)</label>
            </div>
            <div class="position-radio">
                <input type="radio" name="position" value="sibling-before" id="pos-sibling-before">
                <label for="pos-sibling-before">Kao sibling (pre foldera)</label>
            </div>
            <div class="position-radio">
                <input type="radio" name="position" value="sibling-after" id="pos-sibling-after">
                <label for="pos-sibling-after">Kao sibling (posle foldera)</label>
            </div>
        `;
    }
}

function addSectionSelect() {
    const positionOptions = document.getElementById('positionOptions');
    
    // Remove if exists to prevent duplicates
    const existingSelect = document.getElementById('sectionSelectDiv');
    if(existingSelect) existingSelect.remove();

    const selectDiv = document.createElement('div');
    selectDiv.id = 'sectionSelectDiv';
    selectDiv.innerHTML = `
        <div class="form-group" style="margin-top: 10px;">
            <label><i class="fas fa-list"></i> Referentna sekcija:</label>
            <select id="sectionSelect" class="form-select">
                <option value="">-- Izaberi sekciju --</option>
            </select>
        </div>
    `;
    
    positionOptions.appendChild(selectDiv);
    
    // Populate sections
    const sectionSelect = document.getElementById('sectionSelect');
    document.querySelectorAll('.main-section').forEach((section) => {
        const header = section.querySelector('.section-header');
        const option = document.createElement('option');
        option.value = section.dataset.id;
        option.textContent = header ? header.textContent.trim() : '';
        sectionSelect.appendChild(option);
    });
}

// ==================== POPULATE FUNCTIONS ====================
function populateCategories() {
    const select = document.getElementById('categorySelect');
    select.innerHTML = '<option value="">-- Izaberi kategoriju --</option>';
    
    const categories = new Set();
    
    // Add folder headers
    document.querySelectorAll('.folder-header .folder-name').forEach(nameEl => {
        const folderName = nameEl.textContent.trim();
        if (folderName) {
            categories.add(folderName);
        }
    });
    
    // Add section headers
    document.querySelectorAll('.section-header').forEach(header => {
        const text = header.textContent.trim();
        if (text) {
            categories.add(text);
        }
    });
    
    // Add to dropdown sorted
    Array.from(categories).sort().forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        select.appendChild(option);
    });
}

function populateParentFolders() {
    const select = document.getElementById('parentFolderSelect');
    select.innerHTML = '<option value="">-- Root Level (Nova glavna kategorija) --</option>';
    
    // Sort folders by hierarchy
    allFolders.sort((a, b) => {
        if (a.level !== b.level) return a.level - b.level;
        return a.name.localeCompare(b.name);
    });
    
    allFolders.forEach(folder => {
        if (folder.name && folder.id) {
            const indent = '　'.repeat(folder.level);
            const option = document.createElement('option');
            option.value = folder.id;
            option.textContent = indent + folder.name;
            option.dataset.level = folder.level;
            select.appendChild(option);
        }
    });
}

function populateBookmarksForRemoval() {
    const select = document.getElementById('bookmarkRemoveSelect');
    select.innerHTML = '<option value="">-- Izaberi bookmark --</option>';
    
    bookmarkElements = [];
    
    // Find all links in the document
    document.querySelectorAll('a').forEach((link, index) => {
        if (link.href && link.href !== window.location.href) {
            const category = findBookmarkCategory(link);
            const option = document.createElement('option');
            option.value = index;
            option.textContent = `${link.textContent} (${category})`;
            select.appendChild(option);
            
            bookmarkElements.push({
                element: link.parentElement,
                link: link,
                title: link.textContent,
                url: link.href,
                category: category
            });
        }
    });
    
    // Add change event listener for preview
    select.onchange = function() {
        showBookmarkPreview(this);
    };
}

function populateFoldersForRemoval() {
    const select = document.getElementById('folderRemoveSelect');
    select.innerHTML = '<option value="">-- Izaberi folder --</option>';
    
    allFolders.forEach((folder, index) => {
        if (folder.name && folder.id) {
            const indent = '　'.repeat(folder.level);
            const option = document.createElement('option');
            option.value = folder.id;
            option.textContent = indent + folder.name;
            option.dataset.level = folder.level;
            select.appendChild(option);
        }
    });
    
    // Add change event listener for preview
    select.onchange = function() {
        showFolderPreview(this);
    };
}

// ==================== PREVIEW FUNCTIONS ====================
function showBookmarkPreview(select) {
    const preview = document.getElementById('bookmarkPreview');
    
    if (!select.value) {
        preview.classList.remove('show');
        return;
    }
    
    const index = parseInt(select.value);
    const bookmark = bookmarkElements[index];
    
    if (bookmark) {
        preview.innerHTML = `
            <div class="preview-item">
                <i class="fas fa-bookmark preview-icon"></i>
                <div class="preview-text">
                    <div><strong>${bookmark.title}</strong></div>
                    <div class="preview-url">${bookmark.url}</div>
                    <div class="preview-url">Kategorija: ${bookmark.category}</div>
                </div>
            </div>
        `;
        preview.classList.add('show');
    }
}

function showFolderPreview(select) {
    const preview = document.getElementById('folderPreview');
    
    if (!select.value) {
        preview.classList.remove('show');
        return;
    }
    
    const folderId = select.value;
    const folder = allFolders.find(f => f.id === folderId);
    
    if (!folder) return;
    
    // Count contents
    const bookmarkCount = folder.element.querySelectorAll('a').length;
    const subfolders = folder.element.querySelectorAll(':scope > .folder-content .folder, :scope > .section-content .folder');
    const subfolderCount = subfolders.length;
    
    const elementType = folder.element.classList.contains('main-section') ? 'Main Section' : 'Folder';
    
    preview.innerHTML = `
        <div class="preview-item">
            <i class="fas fa-folder preview-icon"></i>
            <div class="preview-text">
                <div><strong>${elementType} Level ${folder.level}: ${folder.name}</strong></div>
                <div class="preview-url">${bookmarkCount} bookmarkova</div>
                <div class="preview-url">${subfolderCount} podfoldera</div>
            </div>
        </div>
    `;
    
    preview.classList.add('show');
}

// ==================== UTILITY FUNCTIONS ====================
function getFolderLevel(folder) {
    for (let i = 0; i <= 5; i++) {
        if (folder.classList.contains(`level-${i}`)) {
            return i;
        }
    }
    return 1;
}

function findBookmarkCategory(link) {
    let element = link.parentElement;
    while (element) {
        if (element.classList && element.classList.contains('folder')) {
            const header = element.querySelector('.folder-header .folder-name');
            if (header) return header.textContent.trim();
        }
        
        if (element.classList && element.classList.contains('main-section')) {
            const header = element.querySelector('.section-header');
            if (header) return header.textContent.trim();
        }
        
        element = element.parentElement;
    }
    return 'Nepoznata kategorija';
}

function parseNumbering(text) {
    const match = text.match(/^(\d+(?:\.\d+)*)/);
    return match ? match[1].split('.').map(n => parseInt(n)) : null;
}

function generateMainSectionNumber() {
    let maxNumber = 0;
    document.querySelectorAll('.main-section .section-header').forEach(header => {
        const text = header.textContent.trim();
        const match = text.match(/^(\d+)\./);
        if (match) {
            maxNumber = Math.max(maxNumber, parseInt(match[1]));
        }
    });
    return maxNumber + 1;
}

function generateFolderNumber(parentFolderId, level) {
    if (!parentFolderId || parentFolderId === '') {
        // Root level - create new main section
        return generateMainSectionNumber();
    }
    
    // Find parent folder and generate appropriate number
    const parentElement = allFolders.find(f => f.id === parentFolderId);
    if (!parentElement) return '1';
    
    const parentNumbers = parseNumbering(parentElement.name) || [];
    const parentContent = parentElement.element.querySelector('.folder-content, .section-content');
    
    if (!parentContent) return parentNumbers.join('.') + '.1';
    
    // Find max child number at this level
    let maxChild = 0;
    const directChildren = parentContent.querySelectorAll(':scope > .folder');
    
    directChildren.forEach(childFolder => {
        const childHeader = childFolder.querySelector('.folder-header .folder-name');
        if (childHeader) {
            const childNumbers = parseNumbering(childHeader.textContent);
            if (childNumbers && childNumbers.length === parentNumbers.length + 1) {
                maxChild = Math.max(maxChild, childNumbers[childNumbers.length - 1]);
            }
        }
    });
    
    const newNumbers = [...parentNumbers, maxChild + 1];
    return newNumbers.join('.');
}

// ================== FIXED FUNCTION ==================
function insertMainSectionAt(newSection, position, referenceSectionId = null) {
    const container = document.querySelector('.container');
    const contentDiv = container.querySelector('.content');

    if (!container || !contentDiv) {
        console.error("Critical layout elements not found!");
        return;
    }

    switch (position) {
        case 'root-start': // For "Na početku..."
            contentDiv.after(newSection); // Inserts right after the div with buttons
            break;
        case 'root-end': // For "Na kraju..."
            container.appendChild(newSection);
            break;
        case 'root-before':
            if (referenceSectionId) {
                const refSection = document.querySelector(`.main-section[data-id="${referenceSectionId}"]`);
                if (refSection) {
                    refSection.before(newSection); // Use .before() for simplicity
                    break;
                }
            }
            // Fallback: if no reference, add at the start of sections
            contentDiv.after(newSection);
            break;
        case 'root-after':
            if (referenceSectionId) {
                const refSection = document.querySelector(`.main-section[data-id="${referenceSectionId}"]`);
                if (refSection) {
                    refSection.after(newSection); // Use .after() for simplicity
                    break;
                }
            }
            // Fallback: if no reference, add at the very end
            container.appendChild(newSection);
            break;
        default:
            // Default action: add to the end
            container.appendChild(newSection);
    }

    reindexMainSections();
}


function reindexMainSections() {
    const sections = document.querySelectorAll('.main-section');
    sections.forEach((section, index) => {
        const header = section.querySelector('.section-header');
        if (header) {
            const currentText = header.textContent.trim();
            const newNumber = index + 1;
            
            // Create new text, preserving the text content after the number and dot
            const newText = currentText.replace(/^\d+\.\s*/, `${newNumber}. `);
            
            // Preserve the icon element
            const icon = header.querySelector('.icon');
            header.innerHTML = ''; // Clear header
            if(icon) header.appendChild(icon); // Re-add icon
            header.append(` ${newText}`); // Add new text
        }
    });
}

// ==================== ACTION EXECUTION ====================
function executeAction() {
    if (currentTab === 'add') {
        if (currentAddType === 'bookmark') {
            addBookmark();
        } else {
            addFolder();
        }
    } else {
        if (currentRemoveType === 'bookmark') {
            removeBookmark();
        } else {
            removeFolder();
        }
    }
}

function addBookmark() {
    const title = document.getElementById('bookmarkTitle').value.trim();
    let url = document.getElementById('bookmarkUrl').value.trim();
    const category = document.getElementById('categorySelect').value;
    
    if (!title) {
        showStatus('Molim unesite naslov!', 'error');
        return;
    }
    
    if (!url) {
        showStatus('Molim unesite URL!', 'error');
        return;
    }
    
    // Add protocol if missing
    if (!url.match(/^https?:\/\//)) {
        url = 'https://' + url;
    }
    
    if (!category) {
        showStatus('Molim izaberite kategoriju!', 'error');
        return;
    }
    
    // Find target category
    let targetElement = null;
    
    // First try folder headers
    document.querySelectorAll('.folder-header .folder-name').forEach(nameEl => {
        if (nameEl.textContent.trim() === category) {
            targetElement = nameEl.closest('.folder').querySelector('.folder-content');
        }
    });
    
    // Then try section headers
    if (!targetElement) {
        document.querySelectorAll('.section-header').forEach(header => {
            if (header.textContent.trim() === category) {
                targetElement = header.nextElementSibling;
            }
        });
    }
    
    if (!targetElement) {
        showStatus('Kategorija nije pronađena!', 'error');
        return;
    }
    
    // Create new bookmark
    const newBookmark = document.createElement('div');
    newBookmark.className = 'leaf';
    newBookmark.innerHTML = `<a href="${url}" target="_blank" rel="noopener noreferrer">${title}</a>`;
    
    targetElement.appendChild(newBookmark);
    
    // Save to storage and update cache
    saveToStorage();
    cacheAllFolders();
    
    showStatus('Bookmark je uspešno dodat!', 'success');
    setTimeout(() => {
        closeBookmarkModal();
    }, 1500);
}

function addFolder() {
    const folderName = document.getElementById('folderName').value.trim();
    const parentFolderId = document.getElementById('parentFolderSelect').value;
    
    if (!folderName) {
        showStatus('Molim unesite naziv foldera!', 'error');
        return;
    }
    
    // Get position selection
    const positionRadios = document.querySelectorAll('input[name="position"]');
    let selectedPosition = 'child'; // Default for sub-folders
    for (let radio of positionRadios) {
        if (radio.checked) {
            selectedPosition = radio.value;
            break;
        }
    }
    
    let targetLevel = 1;
    let folderNumber = '';
    const newFolderId = `folder_${nextElementId++}`;
    
    if (!parentFolderId || parentFolderId === '') {
        // Root level - create new main section
        const mainNumber = generateMainSectionNumber();
        folderNumber = mainNumber + '.';
        targetLevel = 0;
        
        const newSection = document.createElement('div');
        newSection.className = 'main-section';
        newSection.dataset.id = `section_${nextElementId++}`;
        newSection.innerHTML = `
            <div class="section-header">
                <i class="fas fa-folder icon"></i>
                ${folderNumber} ${folderName}
            </div>
            <div class="section-content">
            </div>
        `;
        
        // Get reference section id if needed for 'before' or 'after'
        let referenceSectionId = null;
        if (selectedPosition === 'root-before' || selectedPosition === 'root-after') {
            const sectionSelect = document.getElementById('sectionSelect');
            if (sectionSelect && sectionSelect.value) {
                referenceSectionId = sectionSelect.value;
            } else {
                showStatus('Molim izaberite referentnu sekciju!', 'error');
                return;
            }
        }
        
        insertMainSectionAt(newSection, selectedPosition, referenceSectionId);
        
    } else {
        // Find parent folder using data-id
        const parentElement = allFolders.find(f => f.id === parentFolderId);
        if (!parentElement) {
            showStatus('Parent folder nije pronađen!', 'error');
            return;
        }
        
        targetLevel = parentElement.level + 1;
        if (targetLevel > 5) {
            showStatus('Maksimalna dubina je 5 nivoa!', 'error');
            return;
        }
        
        folderNumber = generateFolderNumber(parentFolderId, targetLevel);
        
        const newFolder = document.createElement('div');
        newFolder.className = `folder level-${targetLevel}`;
        newFolder.dataset.id = newFolderId;
        newFolder.innerHTML = `
            <div class="folder-header">
                <i class="fas fa-chevron-right folder-icon"></i>
                <span class="folder-name">${folderNumber} ${folderName}</span>
            </div>
            <div class="folder-content">
            </div>
        `;
        
        // Position the folder according to selection
        let insertTarget = null;
        
        if (selectedPosition === 'child') {
            insertTarget = parentElement.element.querySelector('.folder-content, .section-content');
            if (insertTarget) {
                insertTarget.appendChild(newFolder);
                // Ensure parent is open to show new folder
                insertTarget.classList.add('open');
                const parentIcon = parentElement.header.querySelector('.folder-icon');
                if (parentIcon) parentIcon.style.transform = 'rotate(90deg)';
            }
        } else if (selectedPosition === 'sibling-before') {
            parentElement.element.before(newFolder);
        } else if (selectedPosition === 'sibling-after') {
            parentElement.element.after(newFolder);
        }
    }
    
    // Save to storage and update cache
    saveToStorage();
    attachFolderClickHandlers();
    cacheAllFolders();
    
    showStatus('Folder je uspešno dodat!', 'success');
    setTimeout(() => {
        closeBookmarkModal();
    }, 1500);
}

function removeBookmark() {
    const selectValue = document.getElementById('bookmarkRemoveSelect').value;
    
    if (!selectValue) {
        showStatus('Molim izaberite bookmark za brisanje!', 'error');
        return;
    }
    
    const index = parseInt(selectValue);
    const bookmark = bookmarkElements[index];
    
    if (bookmark && bookmark.element) {
        bookmark.element.remove();
        
        // Save to storage and update cache
        saveToStorage();
        cacheAllFolders();
        
        showStatus('Bookmark je uspešno uklonjen!', 'success');
        setTimeout(() => {
            closeBookmarkModal();
        }, 1500);
    } else {
        showStatus('Greška pri brisanju bookmarкa!', 'error');
    }
}

function removeFolder() {
    const selectValue = document.getElementById('folderRemoveSelect').value;
    const deleteOption = document.getElementById('deleteOptionsSelect').value;
    
    if (!selectValue) {
        showStatus('Molim izaberite folder za brisanje!', 'error');
        return;
    }
    
    const folder = allFolders.find(f => f.id === selectValue);
    
    if (!folder) {
        showStatus('Folder nije pronađen!', 'error');
        return;
    }
    
    if (deleteOption === 'folder-only') {
        // Move content to parent
        const parent = folder.element.parentElement;
        const content = folder.element.querySelector('.folder-content, .section-content');
        
        if (content && parent) {
            while (content.firstChild) {
                parent.insertBefore(content.firstChild, folder.element);
            }
        }
    }
    
    folder.element.remove();
    
    // If we removed a main section, reindex remaining sections
    if (folder.element.classList.contains('main-section')) {
        reindexMainSections();
    }
    
    // Save to storage and update cache
    saveToStorage();
    cacheAllFolders();
    
    showStatus('Folder je uspešno uklonjen!', 'success');
    setTimeout(() => {
        closeBookmarkModal();
    }, 1500);
}

function showStatus(message, type) {
    const statusDiv = document.getElementById('statusMessage');
    statusDiv.textContent = message;
    statusDiv.className = `status-message status-${type}`;
}

// ==================== EXPORT HTML FUNCTIONALITY ====================
function exportHTML() {
    try {
        // Create a copy of the current document
        const docClone = document.documentElement.cloneNode(true);
        
        // Remove temporary attributes and dynamic content
        const elementsToClean = docClone.querySelectorAll('[data-sb-highlight], [data-sb-hidden], [data-click-attached]');
        elementsToClean.forEach(el => {
            el.removeAttribute('data-sb-highlight');
            el.removeAttribute('data-sb-hidden');
            el.removeAttribute('data-click-attached');
            
            // Clean up any temporary styles
            if (el._sb_prev) {
                delete el._sb_prev;
            }
        });
        
        // Remove the floating buttons and modals from export
        const floatingButtons = docClone.querySelectorAll('.floating-button, .modal, #searchBar');
        floatingButtons.forEach(btn => btn.remove());
        
        // Generate clean HTML
        const htmlString = '<!DOCTYPE html>\n' + docClone.outerHTML;
        
        // Create download
        const blob = new Blob([htmlString], { type: 'text/html;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = 'lions-pith-database.html';
        link.style.display = 'none';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Clean up
        setTimeout(() => URL.revokeObjectURL(url), 100);
        
        showStatus('HTML je uspešno izvezen!', 'success');
        
    } catch (error) {
        console.error('Export failed:', error);
        showStatus('Greška pri izvozu HTML-a!', 'error');
    }
}

// ==================== SEARCH FUNCTIONALITY ====================
let currentMatches = [];
let currentMatchIndex = 0;

function resetAllSearchEffects() {
    // Remove all highlights
    document.querySelectorAll('[data-sb-highlight="true"]').forEach(el => {
        el.removeAttribute('data-sb-highlight');
        if (el._sb_prev) {
            el.style.outline = el._sb_prev.outline || '';
            el.style.boxShadow = el._sb_prev.boxShadow || '';
            el.style.backgroundColor = el._sb_prev.backgroundColor || '';
            delete el._sb_prev;
        }
    });

    // Remove all hidden attributes
    document.querySelectorAll('[data-sb-hidden]').forEach(el => {
        el.removeAttribute('data-sb-hidden');
        if (el.style.display === 'none') {
            el.style.removeProperty('display');
        }
    });

    // Reset results
    currentMatches = [];
    currentMatchIndex = 0;
    updateResultsDisplay();
}

function updateResultsDisplay() {
    const resultsDiv = document.getElementById('searchResults');
    const navigationDiv = document.getElementById('searchNavigation');
    const currentResultSpan = document.getElementById('currentResult');
    
    if (!resultsDiv) return;
    
    if (currentMatches.length === 0) {
        resultsDiv.textContent = '';
        if (navigationDiv) navigationDiv.style.display = 'none';
        return;
    }
    
    resultsDiv.textContent = `Pronađeno: ${currentMatches.length} rezultata`;
    
    if (currentMatches.length > 1 && navigationDiv) {
        navigationDiv.style.display = 'block';
        if (currentResultSpan) {
            currentResultSpan.textContent = `${currentMatchIndex + 1}/${currentMatches.length}`;
        }
        
        const prevBtn = document.getElementById('prevResult');
        const nextBtn = document.getElementById('nextResult');
        
        if (prevBtn) {
            prevBtn.disabled = currentMatchIndex === 0;
            prevBtn.style.background = currentMatchIndex === 0 ? '#444' : '#666';
        }
        if (nextBtn) {
            nextBtn.disabled = currentMatchIndex === currentMatches.length - 1;
            nextBtn.style.background = currentMatchIndex === currentMatches.length - 1 ? '#444' : '#666';
        }
    } else if (navigationDiv) {
        navigationDiv.style.display = 'none';
    }
}

function highlightResult(index) {
    // Remove previous highlights
    document.querySelectorAll('[data-sb-highlight="true"]').forEach(el => {
        el.removeAttribute('data-sb-highlight');
        if (el._sb_prev) {
            el.style.outline = el._sb_prev.outline || '';
            el.style.boxShadow = el._sb_prev.boxShadow || '';
            el.style.backgroundColor = el._sb_prev.backgroundColor || '';
            delete el._sb_prev;
        }
    });
    
    if (index < 0 || index >= currentMatches.length) return;
    
    const target = currentMatches[index];
    if (!target) return;
    
    // Ensure the parent SECTION is visible and opened
    const section = target.closest('.main-section');
    if (section) {
        section.removeAttribute('data-sb-hidden');

        const secContent = section.querySelector('.section-content');
        if (secContent) {
            secContent.classList.add('open');
            secContent.removeAttribute('data-sb-hidden');
        }

        const secIcon = section.querySelector('.section-header .icon');
        if (secIcon) secIcon.style.transform = 'rotate(0deg)';

        if (section.style && section.style.display === 'none') {
            section.style.removeProperty('display');
        }
    }
        
    // Ensure the path to target is visible
    let current = target.parentElement;
    while (current) {
        if (current.classList && current.classList.contains('folder')) {
            const content = current.querySelector('.folder-content');
            if (content) {
                content.classList.add('open');
                content.removeAttribute('data-sb-hidden');
            }
            
            const icon = current.querySelector('.folder-icon');
            if (icon) {
                icon.style.transform = 'rotate(90deg)';
            }
        }
        
        current.removeAttribute('data-sb-hidden');
        current = current.parentElement;
    }
    
    // Highlight and scroll to target
    setTimeout(() => {
        try { 
            target.scrollIntoView({ behavior: 'smooth', block: 'center' }); 
        } catch (e) { 
            target.scrollIntoView(); 
        }

        if (!target._sb_prev) {
            target._sb_prev = {
                outline: target.style.outline || '',
                boxShadow: target.style.boxShadow || '',
                backgroundColor: target.style.backgroundColor || ''
            };
        }
        target.setAttribute('data-sb-highlight', 'true');
        target.style.outline = '3px solid #000000';
        target.style.boxShadow = '0 0 12px rgba(28, 18, 94, 1)';
        if (!target.style.backgroundColor) target.style.backgroundColor = '#436D8C';
    }, 100);
}

function navigateResults(direction) {
    if (currentMatches.length === 0) return;
    
    currentMatchIndex += direction;
    
    if (currentMatchIndex < 0) currentMatchIndex = 0;
    if (currentMatchIndex >= currentMatches.length) currentMatchIndex = currentMatches.length - 1;
    
    updateResultsDisplay();
    highlightResult(currentMatchIndex);
}

function searchFolders() {
    const searchBox = document.getElementById('searchBox');
    if (!searchBox) return;

    if (window._searchDebounce) clearTimeout(window._searchDebounce);
    const typed = searchBox.value;
    window._searchDebounce = setTimeout(() => {
        const raw = (typed || '').trim();
        const q = raw.toLowerCase();

        const hideEl = el => { if (!el) return; el.setAttribute('data-sb-hidden','true'); };
        const unhideEl = el => { if (!el) return; el.removeAttribute('data-sb-hidden'); };
        const normalize = n => (n && n.textContent) ? n.textContent.replace(/\s+/g,' ').trim() : '';

        currentMatches = [];
        currentMatchIndex = 0;

        document.querySelectorAll('[data-sb-highlight="true"]').forEach(el => {
            el.removeAttribute('data-sb-highlight');
            if (el._sb_prev) {
                el.style.outline = el._sb_prev.outline || '';
                el.style.boxShadow = el._sb_prev.boxShadow || '';
                el.style.backgroundColor = el._sb_prev.backgroundColor || '';
                delete el._sb_prev;
            }
        });

        if (!q) {
            resetAllSearchEffects();
            return;
        }

        const candidates = Array.from(document.querySelectorAll(
            'a, .folder-header, .section-header, h1,h2,h3,h4,h5,h6, .leaf'
        ));

        let matches = candidates.filter(n => normalize(n).toLowerCase() === q);
        if (matches.length === 0) {
            matches = candidates.filter(n => normalize(n).toLowerCase().includes(q));
        }

        currentMatches = matches;
        currentMatchIndex = 0;
        updateResultsDisplay();

        if (matches.length === 0) {
            try { searchBox.focus(); } catch(e){}
            return;
        }

        // Find folders with matches
        const foldersWithMatch = new Set();
        const sectionsWithMatch = new Set();
        
        matches.forEach(node => {
            let p = node;
            while (p) {
                if (p.classList && p.classList.contains('folder')) {
                    foldersWithMatch.add(p);
                }
                if (p.classList && p.classList.contains('main-section')) {
                    sectionsWithMatch.add(p);
                }
                p = p.parentElement;
            }
        });

        // Hide all sections initially
        document.querySelectorAll('.main-section').forEach(hideEl);
        
        // Show sections that have matches
        sectionsWithMatch.forEach(section => {
            unhideEl(section);
            
            // Hide all folders in this section initially
            section.querySelectorAll('.folder').forEach(hideEl);
        });

        // Show folders that have matches and their parents
        foldersWithMatch.forEach(folder => {
            let current = folder;
            while (current && (current.classList.contains('folder') || current.classList.contains('main-section'))) {
                unhideEl(current);
                
                if (current.classList.contains('folder')) {
                    const content = current.querySelector('.folder-content');
                    if (content) {
                        content.classList.add('open');
                        content.removeAttribute('data-sb-hidden');
                    }
                    
                    const icon = current.querySelector('.folder-icon');
                    if (icon) {
                        icon.style.transform = 'rotate(90deg)';
                    }
                }
                
                current = current.parentElement;
                while (current && !current.classList.contains('folder') && !current.classList.contains('main-section')) {
                    current = current.parentElement;
                }
            }
        });

        // Highlight first result
        if (matches.length > 0) {
            highlightResult(0);
        }
    }, 200);
}

function clearSearchBar() {
    const searchBox = document.getElementById('searchBox');
    if (searchBox) {
        searchBox.value = '';
        resetAllSearchEffects();
        try { searchBox.focus(); } catch(e){}
    }
}

(function(){
  // postavi target="_blank" i rel="noopener noreferrer" za sve postojeće linkove u sekcijama/folderima
  function setBlank(links){
    links.forEach(a=>{
      a.setAttribute('target','_blank');
      const rel = (a.getAttribute('rel')||'').split(/\s+/).filter(Boolean);
      ['noopener','noreferrer'].forEach(r=>{ if(!rel.includes(r)) rel.push(r); });
      a.setAttribute('rel', rel.join(' '));
    });
  }

  setBlank(document.querySelectorAll('.container a, .main-section a, .folder a, .folder-content a, .section-content a, .leaf a'));

  // Optional: automatski primeni i na linkove koji se naknadno dodaju
  new MutationObserver(muts=>{
    muts.forEach(m=>{
      m.addedNodes.forEach(node=>{
        if(node.nodeType!==1) return;
        if(node.matches && node.matches('a')) setBlank([node]);
        if(node.querySelector) setBlank(node.querySelectorAll('a'));
      });
    });
  }).observe(document.body, { childList: true, subtree: true });
})();
</script>
</body>
</html>